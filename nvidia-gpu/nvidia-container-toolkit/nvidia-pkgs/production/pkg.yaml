name: nvidia-pkgs-production
variant: scratch
shell: /bin/bash
install:
  - bash
dependencies:
  - image: cgr.dev/chainguard/wolfi-base@{{ .WOLFI_BASE_REF }}
  # depends on glibc to update ld.so.cache
  # so any stage depending on nvidia-pkgs will have the updated cache
  - stage: glibc
steps:
  - sources:
    # {{ if eq .ARCH "aarch64" }} This in fact is YAML comment, but Go templating instruction is evaluated by bldr
      - url: https://developer.download.nvidia.com/compute/nvidia-driver/redist/nvidia_driver/linux-sbsa/nvidia_driver-linux-sbsa-{{ .NVIDIA_DRIVER_PRODUCTION_VERSION }}-archive.tar.xz
        destination: nvidia.tar.xz
        sha256: 025ee91b6f75d7deb5cb98bc8327c6bae5fd925029d5f853e26720f10d5fcdcf
        sha512: cf18ecd885d4520930a01605c8f23ae02eb76d4e660c72c1ab99f6bbaabbad263222c5c41863fcafcf293bd9f78a6dec319ae70921c0188b8b07960ddcd6b12f
    # {{ else }} This in fact is YAML comment, but Go templating instruction is evaluated by bldr
      - url: https://developer.download.nvidia.com/compute/nvidia-driver/redist/nvidia_driver/linux-x86_64/nvidia_driver-linux-x86_64-{{ .NVIDIA_DRIVER_PRODUCTION_VERSION }}-archive.tar.xz
        destination: nvidia.tar.xz
        sha256: 04551fbeda76645e664910f1168e1fb3c9ac379461296da0474d0231e703ad70
        sha512: 9715a8d9707bd999b6955048d626e48e807ecd2507b8e6437acd0bf1f0b8de59d41e649bb26a4a9024bbec4f35da6fac64d7652dda63b626d41a17fd4753f110
    # {{ end }} This in fact is YAML comment, but Go templating instruction is evaluated by bldr
    prepare:
      - |
        # the nvidia installer validates these packages are installed
        ln -s /bin/true /bin/modprobe
        ln -s /bin/true /bin/rmmod
        ln -s /bin/true /bin/lsmod
        ln -s /bin/true /bin/depmod

        tar xf nvidia.tar.xz --strip-components=1
    install:
      - |
        mkdir -p assets/html

        cp -r bin/* assets/
        cp CHANGELOG assets/NVIDIA_Changelog
        cp -r docs/* assets/html/
        cp -r etc/* assets/
        cp -r firmware assets/
        cp -r lib/* assets/
        cp LICENSE assets/
        cp -r man/man1/* assets/
        cp MANIFEST assets/.manifest
        cp README assets/README.txt
        cp -r sbin/* assets/
        cp -r share/* assets/
        cp -r supported-gpus assets/
        cp -r systemd assets/
        # {{ if eq .ARCH "x86_64" }}cp -r wine/* assets/{{ end }}

        cd assets

        ./nvidia-installer --silent \
          --opengl-prefix=/rootfs/usr/local \
          --utility-prefix=/rootfs/usr/local \
          --utility-libdir=glibc/lib \
          --documentation-prefix=/rootfs/usr/local \
          --no-rpms \
          --no-kernel-modules \
          --log-file-name=/tmp/nvidia-installer.log \
          --no-distro-scripts \
          --no-wine-files \
          --no-kernel-module-source \
          --no-check-for-alternate-installs \
          --override-file-type-destination=NVIDIA_MODPROBE:/rootfs/usr/local/bin \
          --override-file-type-destination=FIRMWARE:/rootfs/lib/firmware/nvidia/{{ .NVIDIA_DRIVER_PRODUCTION_VERSION }} \
          --no-systemd

        # copy vulkan/OpenGL json files
        mkdir -p /rootfs/{etc/vulkan,usr/share/{glvnd,egl}}

        cp -r /usr/share/glvnd/* /rootfs/usr/share/glvnd
        cp -r /usr/share/egl/* /rootfs/usr/share/egl
        cp -r /etc/vulkan/* /rootfs/etc/vulkan

        # mv over files from /usr/local/lib -> /usr/local/glibc/lib
        mv /rootfs/usr/local/lib/* /rootfs/usr/local/glibc/lib/

        # copy xorg files
        mkdir -p /rootfs/usr/local/glibc/lib/nvidia/xorg
        find /usr/lib/xorg/modules -type f -exec cp {} /rootfs/usr/local/glibc/lib/nvidia/xorg \;

        # run ldconfig to update the cache
        /rootfs/usr/local/glibc/sbin/ldconfig -r /rootfs

        mkdir -p /rootfs/usr/local/lib/containers/nvidia-persistenced \
          /rootfs/usr/local/etc/containers \
          /rootfs/usr/lib/udev/rules.d

        # copy udev rule
        cp /pkg/files/15-nvidia-device.rules /rootfs/usr/lib/udev/rules.d
finalize:
  - from: /rootfs
    to: /rootfs
